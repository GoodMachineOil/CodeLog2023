package org.example.整数拆分leetcode343;
/**
 * @Author: zc
 * @Description:
 * 给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
 * 返回 你可以获得的最大乘积 。
 *
 * 示例 1:
 * 输入: n = 2
 * 输出: 1
 * 解释: 2 = 1 + 1, 1 × 1 = 1。
 * 示例 2:
 * 输入: n = 10
 * 输出: 36
 * 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
 *
 * 提示:
 * 2 <= n <= 58
 */
public class Solution {
    public int integerBreak(int n) {
        //在这个题目中，我们定义 dp[i] 表示正整数 i 拆分后的结果的最大乘积，因此需要一个数组 dp 来存储结果。
        // 由于数组的下标从 0 开始，因此需要定义一个长度为 n+1 的数组，才能够表示从 1 到 n 的结果。
        int[] dp = new int[n+1];
        dp[2] = 1;
        for(int i = 3; i <= n ; i++){
            //因为拆分一个数n 使之乘积最大，那么一定是拆分成m个近似相同的子数相乘才是最大的。
            //那么 j 遍历，只需要遍历到 n/2 就可以，后面就没有必要遍历了，一定不是最大值。
            for(int j = 1; j <= i/2 ; j++){
                // j * (i - j) 是单纯的把整数 i 拆分为两个数 也就是 i,i-j ，再相乘
                //而j * dp[i - j]是将 i 拆分成两个以及两个以上的个数,再相乘。
                dp[i] = Math.max(dp[i],Math.max(j*(i-j),j*dp[i-j]));
            }
        }
        return dp[n];
    }
}
