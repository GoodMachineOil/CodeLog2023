package org.example.根据身高重建队列leetcode406;

import java.util.Arrays;
import java.util.LinkedList;
/**

 * @Description:

假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。



示例 1：

输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
示例 2：

输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 */
public class Solution {
    public int[][] reconstructQueue(int[][] people) {
        //(a, b) -> {...} 表示一个 Lambda 表达式
        // 身高从大到小排（身高相同k小的站前面）
        Arrays.sort(people,(a,b) -> {
            if(a[0] == b[0]){
                return a[1] - b[1];
            }
            return b[0] - a[0];
        });

        LinkedList<int[]> queue = new LinkedList<>();
        //具体来说，代码中的 for 循环遍历数组 people 中的每个元素，每次将一个长度为 2 的一维数组 p 取出。
        // p[0] 表示这个人的身高，p[1] 表示在这个人前面身高比他高的人的数量。然后将这个一维数组 p 插入到优先队列中，
        // 使用的是 add 方法，并传入了两个参数：p[1] 表示插入的位置，即在队列中插入到第几个元素的位置，p 表示要插入的元素。
        for(int[] p : people){
            queue.add(p[1],p);
        }

        return queue.toArray(new int[people.length][]);
    }
}
/**
 * @Description:
具体来说，queue.toArray() 方法会返回一个包含队列中所有元素的数组，但是这个数组类型是 Object[]，需要进行强制类型转换才能得到二维数组类型 int[][]。
但是，在强制类型转换时需要注意，因为 Object[] 类型的数组不能直接转换成 int[][] 类型的数组，需要使用另一种转换方式。
在这个例子中，使用了另一种将 Object[] 转换成 int[][] 的方式，即使用 new int[people.length][] 构造一个空的二维数组，然后将其作为参数传递给 toArray 方法。
在这种方式下，toArray 方法会根据数组的元素类型和数组长度创建一个新的二维数组，并将队列中的元素复制到这个新数组中，最终返回这个新数组。

因此，这行代码的作用就是将队列中的元素转换成二维数组类型 int[][]，并将其赋值给 people 变量。
这个二维数组中的每个元素都是一个长度为 2 的一维数组，表示每个人的身高和前面比他高的人的数量。
 */
